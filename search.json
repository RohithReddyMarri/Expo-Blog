[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "GridSpec",
    "section": "",
    "text": "Assignment 3\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\n\n\n\n\n\n\nSimple Visualisation\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome\n\n\n\n\n\nWelcome Post\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto Template",
    "section": "",
    "text": "Quarto template Text!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 3\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\n\n\n\n\n\n\nSimple Visualisation\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome\n\n\n\n\n\nWelcome Post\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/visualisation.html",
    "href": "posts/visualisation.html",
    "title": "Simple Visualisation",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.plot(y,x)\n\n\n\n\n\n\n\n\n\nprint(\"Hello World1\")\n\nHello World1\n\n\n\nprint(67358478498)\n\n67358478498\n\n\nMy name is Billa"
  },
  {
    "objectID": "posts/J089_Assignment_3-checkpoint.html",
    "href": "posts/J089_Assignment_3-checkpoint.html",
    "title": "Assignment 3",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load the datasets\nstate_data = pd.read_csv('State_data.csv')\nncap_funding = pd.read_csv('NCAP_Funding.csv')\npm25_data = pd.read_csv('Data.csv')\n\nArea Based\n\n#Ans 1\nstate_data.rename(columns={\"State\": \"state\"}, inplace=True)\ndf_pollution_clean = pm25_data.dropna(subset=[\"PM2.5\"])\npm25_avg_per_state = df_pollution_clean.groupby(\"state\")[\"PM2.5\"].mean().reset_index()\ndf_merged = pd.merge(pm25_avg_per_state,state_data, on='state')\ndf_merged[\"PM2.5 per sq km\"] = df_merged[\"PM2.5\"] / df_merged[\"Area (km2)\"]\ndf_merged_sorted = df_merged.sort_values(by=\"PM2.5 per sq km\", ascending=False)\nmost_polluted_state = df_merged_sorted.iloc[0][\"state\"]\nprint(f\"State with the highest PM2.5 concentration per square kilometer: {most_polluted_state}\")\nplt.figure(figsize=(14, 8))\nplt.bar(df_merged_sorted[\"state\"], df_merged_sorted[\"PM2.5 per sq km\"], color='red')\nplt.xticks(rotation=90)\nplt.xlabel(\"States\")\nplt.ylabel(\"PM2.5 Concentration per sq km\")\nplt.title(\"PM2.5 Concentration per Sq km by Various States\")\nplt.grid(True, linestyle=\"--\", alpha=0.5)\nplt.show()\n\nState with the highest PM2.5 concentration per square kilometer: Chandigarh\n\n\n\n\n\n\n\n\n\n\n#Ans 2\nstate_data.rename(columns={\"State\": \"state\"}, inplace=True)\nstation_count_per_state = pm25_data.groupby(\"state\")[\"station\"].nunique().reset_index()\nstation_count_per_state.rename(columns={\"station\": \"Number of Stations\"}, inplace=True)\ndf_station_density = pd.merge(station_count_per_state,state_data,on=\"state\")\ndf_station_density[\"Stations per sq km\"] = df_station_density[\"Number of Stations\"] / df_station_density[\"Area (km2)\"]\ndf_station_density_sorted = df_station_density.sort_values(by=\"Stations per sq km\", ascending=False)\nmost_dense_state = df_station_density_sorted.iloc[0][\"state\"]\nprint(f\"State with the highest density of monitoring stations: {most_dense_state}\")\nplt.figure(figsize=(14, 8))\nplt.bar(df_station_density_sorted[\"state\"], df_station_density_sorted[\"Stations per sq km\"], color='coral')\nplt.xticks(rotation=90)\nplt.xlabel(\"States\")\nplt.ylabel(\"Monitoring Stations per sq km\")\nplt.title(\"Density of Monitoring Stations per Sq km by Various States\")\nplt.show()\n\nState with the highest density of monitoring stations: Delhi\n\n\n\n\n\n\n\n\n\n\n#Ans 3\nstate_data = pd.read_csv(\"State_data.csv\")\ndata_pollution = pd.read_csv(\"Data.csv\")\n\ndata_pollution[\"Timestamp\"] = pd.to_datetime(data_pollution[\"Timestamp\"], errors='coerce')\n\ndata_2021 = data_pollution[(data_pollution[\"Timestamp\"].dt.year == 2021) &\n                       (data_pollution[\"state\"].isin([\"Maharashtra\", \"Madhya Pradesh\"]))]\n\npm25_avg = data_2021.groupby(\"state\")[\"PM2.5\"].mean().reset_index()\n\npop_area_data = state_data[state_data[\"State\"].isin([\"Maharashtra\", \"Madhya Pradesh\"])][[\"State\", \"Population\", \"Area (km2)\"]]\n\npop_area_data[\"Population Density\"] = pop_area_data[\"Population\"] / pop_area_data[\"Area (km2)\"]\n\nanalysis_data = pop_area_data.merge(pm25_avg, left_on=\"State\", right_on=\"state\").drop(columns=[\"state\"])\n\nprint(analysis_data)\n\nfig, ax1 = plt.subplots(figsize=(8, 5))\nax1.bar(analysis_data[\"State\"], analysis_data[\"Population Density\"], color='skyblue', label=\"Population Density\")\nax1.set_ylabel(\"Population Density (people per sq km)\", color='blue')\nax1.tick_params(axis='y', labelcolor='blue')\n\nax2 = ax1.twinx()\nax2.plot(analysis_data[\"State\"], analysis_data[\"PM2.5\"], color='red', marker='o', linestyle='-', label=\"PM2.5 Levels\")\nax2.set_ylabel(\"Average PM2.5 (µg/m³)\", color='red')\nax2.tick_params(axis='y', labelcolor='red')\n\nplt.title(\"Population Density vs PM2.5 Levels (2021)\")\nfig.tight_layout()\nplt.show()\n\n            State  Population  Area (km2)  Population Density      PM2.5\n0     Maharashtra   112374333      307713          365.192023  46.440044\n1  Madhya Pradesh    72626809      308252          235.608557  47.095952\n\n\n\n\n\n\n\n\n\nFunding Based\n\n#Ans 1\nncap_funding['Amount released during FY 2021-22'] = pd.to_numeric(ncap_funding['Amount released during FY 2021-22'], errors='coerce')\n\nfunded_states_2021 = ncap_funding[ncap_funding['Amount released during FY 2021-22'] &gt; 0]['State'].unique()\n\nfunded_states_data = data[data['state'].isin(funded_states_2021)]\nnon_funded_states_data = data[~data['state'].isin(funded_states_2021)]\n\navg_pm25_funded = funded_states_data['PM2.5'].mean()\navg_pm25_non_funded = non_funded_states_data['PM2.5'].mean()\n\nprint(f\"Average PM2.5 for states that received NCAP funding in 2021: {avg_pm25_funded}\")\nprint(f\"Average PM2.5 for states that did not receive NCAP funding in 2021: {avg_pm25_non_funded}\")\n\nAverage PM2.5 for states that received NCAP funding in 2021: 62.22735848700783\nAverage PM2.5 for states that did not receive NCAP funding in 2021: 52.65062674226705\n\n\n\n#Ans 2\nassam_pm25_data = pm25_data[pm25_data[\"state\"] == \"Assam\"].copy()\nassam_pm25_data[\"Timestamp\"] = pd.to_datetime(assam_pm25_data[\"Timestamp\"])\nassam_pm25_trend = assam_pm25_data.groupby(\"Timestamp\")[\"PM2.5\"].mean().reset_index()\nassam_funding_data = ncap_funding[ncap_funding[\"State\"] == \"Assam\"].copy()\nfunding_columns = [\n    \"Amount released during FY 2019-20\",\n    \"Amount released during FY 2020-21\",\n    \"Amount released during FY 2021-22\",\n    \"Total fund released\",\n]\nfor col in funding_columns:\n    assam_funding_data[col] = pd.to_numeric(assam_funding_data[col], errors=\"coerce\")\nassam_funding_summary = assam_funding_data[funding_columns].sum().reset_index()\nassam_funding_summary.columns = [\"Year\", \"Funding Amount\"]\nyear_mapping = {\n    \"Amount released during FY 2019-20\": \"2019-04-01\",\n    \"Amount released during FY 2020-21\": \"2020-04-01\",\n    \"Amount released during FY 2021-22\": \"2021-04-01\",\n}\nassam_funding_summary[\"Year\"] = assam_funding_summary[\"Year\"].map(year_mapping)\nassam_funding_summary.dropna(inplace=True)\nassam_funding_summary[\"Year\"] = pd.to_datetime(assam_funding_summary[\"Year\"])\nfig, ax1 = plt.subplots(figsize=(10, 5))\n\nax1.plot(assam_pm25_trend[\"Timestamp\"], assam_pm25_trend[\"PM2.5\"], color=\"red\", label=\"PM2.5 Levels\")\nax1.set_xlabel(\"Year\")\nax1.set_ylabel(\"PM2.5 (µg/m³)\", color=\"red\")\nax1.tick_params(axis=\"y\", labelcolor=\"red\")\n\nax2 = ax1.twinx()\nax2.scatter(assam_funding_summary[\"Year\"], assam_funding_summary[\"Funding Amount\"], color=\"blue\", label=\"NCAP Funding\", marker=\"o\", s=100)\nax2.set_ylabel(\"NCAP Funding (Cr)\", color=\"blue\")\nax2.tick_params(axis=\"y\", labelcolor=\"blue\")\n\nplt.title(\"PM2.5 Levels and NCAP Funding in Assam\")\nax1.legend(loc=\"upper left\")\nax2.legend(loc=\"upper right\")\n\nplt.show()\n\n\n\n\n\n\n\n\nNCAP_Funding of Assam has been increased in the year 2020-2021 and clearly we can see that in that period the value of PM_2.5 has also increased indicating that the Quality of Air has Decreased. Therefore, increment of the financing didn’t lead to noticeable improvements in air quality.\n\n#Ans 3\nstate_data.columns = state_data.columns.str.strip()\nncap_funding.columns = ncap_funding.columns.str.strip()\n\n# Group NCAP funding by state and calculate the sum of funds released\nfunds_by_state = ncap_funding.groupby('State')['Total fund released'].sum().reset_index()\n\n# Merge the funds data with state area data\nmerged_data = pd.merge(state_data, funds_by_state, on='State', how='inner')\n\n# Create scatter plot for area vs total fund released\nplt.figure(figsize=(12,8))\nsns.scatterplot(x=merged_data['Area (km2)'], y=merged_data['Total fund released'], \n                hue=merged_data['State'], palette='tab20', s=100)\n\n# Customize the plot\nplt.xlabel('Area (km²)')\nplt.ylabel('Total NCAP Funding Released (in Crores INR)')\nplt.title('Area vs Total NCAP Funding Released by State')\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5), title='States')\n\n# Show the plot\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "posts/welcome.html",
    "href": "posts/welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome\nHello world, this is my first blog post.\nI can write in markdown\nprint(\"Hello World\")\nI can also write math equations:\n\\[\ny = x^2\n\\]\nI can create lists easily:\n\nOne\nTwo\n\nI can also create numbered lists:\n\nOne\nTwo\n\nOr, create a table:\n\n\n\nName\nAge\n\n\n\n\nAlice\n20\n\n\nBob\n21"
  },
  {
    "objectID": "J089_Lab1_Numpy-checkpoint.html",
    "href": "J089_Lab1_Numpy-checkpoint.html",
    "title": "Assign",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n%pip install pydub -q\n\n\nCreating Arrays\n\n1. Create a 1D array with 20 random integers between 1 and 100.\nHint: Use the np.random.randint() function, specifying the range and size. #### 2. Create a 5x5 matrix where all the border elements are 1, and the inside elements are 0. #### 3. Create a diagonal matrix with values [1, 2, 3, 4] on the diagonal. #### 4. Create an array of shape (3, 3) where each row contains numbers from 1 to 3. Hint: Use np.tile() to repeat arrays along rows or columns. #### 5. Create a 1D array with alternating 0s and 1s of length 10. #### 6. Create a 3x3 matrix with random integers between 10 and 20, and set the datatype to int32.\n\n# @title 1\narr_1D = np.random.randint(1,101,20)\nprint(arr_1D)\n\n[98 32 82 60 17 41 44 93 73 20 29 84 90 12 31 72 92 64 71 56]\n\n\n\n# @title 2\nmatrix = np.ones((5,5))\nmatrix[1:4,1:4] = 0\nprint(matrix)\n\n[[1. 1. 1. 1. 1.]\n [1. 0. 0. 0. 1.]\n [1. 0. 0. 0. 1.]\n [1. 0. 0. 0. 1.]\n [1. 1. 1. 1. 1.]]\n\n\n\n# @title 3\nx = (1,2,3,4)\ndiag_mat = np.diag(x)\nprint(diag_mat)\n\n[[1 0 0 0]\n [0 2 0 0]\n [0 0 3 0]\n [0 0 0 4]]\n\n\n\n# @title 4\nRow1 = np.array([1,2,3])\narr = np.tile(Row1,(3,1))\nprint(arr)\n\n[[1 2 3]\n [1 2 3]\n [1 2 3]]\n\n\n\n# @title 5\narr = np.array([0,1])\narr_1D = np.tile(arr,(1,5))\nprint(arr_1D)\n\n[[0 1 0 1 0 1 0 1 0 1]]\n\n\n\n# @title 6\nmatrix = np.random.randint(11,20,(3,3),dtype=np.int32)\nprint(matrix)\n\n[[17 15 13]\n [16 17 19]\n [17 13 18]]\n\n\n\n\n\nArray Attributes\n####1. Create a NumPy array of shape (4, 5) filled with random integers between 1 and 10. Now use an appropriate attribute of an array and find the following:\n# This is formatted as code\n\nshape of the array\nsize of the array\nnumber of dimensions\ndata type\n\n####2. Write a Python function that takes an array as input and returns the number of dimensions (ndim) of the array. Test the function with the following arrays:\n\nA 1D array with 5 elements.\nA 2D array of size (3x4).\nA 3D array of size (2x3x4).\n\n####3. Create a NumPy array with the elements between 1 to 100 and use the dtype attribute to find out the data type of the elements. Modify the program to create arrays with elements of type float and string, and observe the changes in dtype.\n####4. Write a Python function that: 1. Creates a 6×3 array of integers using NumPy. 2. Prints the shape of the array using the shape attribute. 3. Reshapes the array to 3×6 and prints the new shape.\n####5. Write a program to: 1. Create an array of any size with all elements being 0 and use the appropriate attribute to print the size (in bytes) of each element in the array. 2. Create an array of any size with elements between 1 to 10 and print the size. 3. Create another array with floating-point numbers of any size and observe how the size changes.\n\n\n# @title 1\narr = np.random.randint(2,10,(4,5))\nprint(arr.shape)\nprint(arr.size)\nprint(arr.ndim)\nprint(arr.dtype)\n\n(4, 5)\n20\n2\nint64\n\n\n\n# @title 2\ndef function(x) :\n    dim = np.ndim(x)\n    return dim\narr_1D = np.random.randint(0,10,(5,))\nprint(function(arr_1D))\narr_2D = np.random.randint(0,10,(3,4))\nprint(function(arr_2D))\narr_3D = np.random.randint(0,10,(2,3,4))\nprint(function(arr_3D))\n\n1\n2\n3\n\n\n\n# @title 3\narr_int = np.arange(1,101,dtype=int)\nprint(arr_int.dtype)\narr_float = np.arange(1,101,dtype=float)\nprint(arr_float.dtype)\narr_str = np.array([str(i) for i in range(1,101)])\nprint(arr_str.dtype)\n\nint64\nfloat64\n&lt;U3\n\n\n\n# @title 4\ndef fun(arr):\n    arr = np.random.randint(1,10,(6,3),int)\n    print('original array :\\n',arr)\n    print('shape of original array =',arr.shape)\n    arr_reshape = arr.reshape((3,6))\n    print('reshaped array :\\n',arr_reshape)\n    print('shape of reshaped array =',arr_reshape.shape)\nfun(arr)\n\noriginal array \n: [[9 3 2]\n [9 2 1]\n [6 6 4]\n [2 8 2]\n [3 1 2]\n [6 8 8]]\nshape of original array = (6, 3)\nreshaped array \n: [[9 3 2 9 2 1]\n [6 6 4 2 8 2]\n [3 1 2 6 8 8]]\nshape of reshaped array = (3, 6)\n\n\n\n# @title 5\narr_zeroes = np.zeros(10)\nprint('size of elements in arr_zeroes :',arr.itemsize)\narr_int = np.random.randint(1,10,10,int)\nprint('size of elements in arr_int :',arr.itemsize)\nlist_float = np.arange(1,10,dtype=float)\narr_float = np.array(list_float)\nprint('size of elements in arr_float :',y.itemsize)\n\nsize of elements in arr_zeroes : 8\nsize of elements in arr_int : 8\nsize of elements in arr_float : 8\n\n\n\n\nSorting and Partioning\n####1. Given an array arr, sort the array in ascending order without modifying the original array. Print both the original and sorted arrays.(use np.sort())\n####2. You have arr = np.array([50, 30, 40, 20]) and names = np.array([“A”, “B”, “C”, “D”]). Sort the arr values in ascending order and rearrange the names array accordingly.(use np.argsort() to get sorted indices and reorder names)\n####3. Write code to find the k smallest elements from the array arr. Print these elements in ascending order.(use np.partition())\n####4. Partition the array arr such that all elements smaller than a particular number(user input) appear before those greater than or equal to that number. Print the partitioned array.(use np.partition() to find the pivot value’s index)\n####5. Sort each row of a 2D array arr in ascending order.(use np.sort() with axis parameter)\n####6. Print k largest elements of an array arr in descending order.(use np.partition() to find top k elements)\n####7. Given an array arr(containing possible negative values), sort the array in ascending order based on the absolute values of the elements. Print the sorted array.(use np.argsort() with a custom key for absolute values)\n####8. Given an array arr, sort only the elements greater than k in ascending order, keeping the other elements in their original positions.(create a mask to find elements greater than k, use np.sort() to sort them then reassign the sorted values back to their original indices in the array)\n\n# @title 1\narr = [5,45,63,56,43,45,3,45]\nprint(\"Sorted copy:\", np.sort(arr))\nprint(\"Original:\",arr)\n\nSorted copy: [ 3  5 43 45 45 45 56 63]\nOriginal: [5, 45, 63, 56, 43, 45, 3, 45]\n\n\n\n# @title 2\narr = np.array([50, 30, 40, 20])\nnames = np.array([\"A\", \"B\", \"C\", \"D\"])\nsort_indices = np.argsort(arr)\nprint('sorted array =',arr[sort_indices])\nprint('sorted names =',names[sort_indices])\n\nsorted array = [20 30 40 50]\nsorted names = ['D' 'B' 'C' 'A']\n\n\n\n# @title 3\nk = int(input('Enter a Number :'))\narr = np.random.randint(1,100,20)\npartitioned_arr = np.partition(arr,k)\nprint(np.sort(partitioned_arr[0:k]))\n\nEnter a Number :11\n[ 3 16 18 26 27 29 33 38 46 47 57]\n\n\n\n# @title 4\npivot = int(input('Enter the pivot value :'))\narr = np.random.randint(1,100,20)\nprint('original array =',arr)\npartitioned_arr = np.partition(arr,np.searchsorted(arr,pivot))\nprint('partitioned array =',partitioned_arr)\nprint('index of the pivot value =',np.searchsorted(partitioned_arr,pivot))\n\nEnter the pivot value :40\noriginal array = [46 33 63 56 94  8  4 11 52 10 82 50 27 28  1 37 58 57 37 66]\npartitioned array = [ 8  1 11  4 10 27 28 33 37 37 46 50 82 52 94 56 58 57 63 66]\nindex of the pivot value = 10\n\n\n\n# @title 5\narr_2D = np.random.randint(1,200,(3,3))\nsort_arr_2D= np.sort(arr_2D,axis = 1)\nprint(sort_arr_2D)\n\n[[ 43 137 147]\n [ 81 114 134]\n [ 44  53 115]]\n\n\n\n# @title 6\narr = np.random.randint(1,200,30)\nk = int(input('Enter the value of k :'))\npartitioned_arr = np.partition(arr,30-k)\nfinal_arr = partitioned_arr[30-k:]\nreverse_final_arr = final_arr[::-1]\nprint(arr)\nprint(reverse_final_arr)\n\nEnter the value of k :14\n[106 167 170  57 100 155  81  83 107 132 186 152 189  14   4  99  65 162\n  81 172 116 153  41 119 167 173  53  24 102  11]\n[186 172 189 173 170 167 162 167 155 153 132 152 119 116]\n\n\n\n# @title 7\nog_arr = np.random.randint(-200,200,size = 20)\nfinal_arr = np.argsort(np.abs(og_arr))\nprint(og_arr)\nprint(og_arr[final_arr])\n\n[ -77 -193 -135 -124 -130  -23 -111  125  -45   13   68  -14 -139 -144\n  -42 -111 -103   -9  -29 -129]\n[  -9   13  -14  -23  -29  -42  -45   68  -77 -103 -111 -111 -124  125\n -129 -130 -135 -139 -144 -193]\n\n\n\n# @title 8\narr = np.random.randint(1,20,size=(10))\nprint(arr)\nk = int(input('Enter the value of k :'))\nmask = arr &gt; k\nprint(mask)\nprint(arr[mask])\narr[mask]=np.sort(arr[mask])\nprint('ascended_array :',arr)\n\n[19  1  6  6  7 11  7  7  5 11]\nEnter the value of k :10\n[ True False False False False  True False False False  True]\n[19 11 11]\nascended_array : [11  1  6  6  7 11  7  7  5 19]\n\n\n\n\nIndexing and slicing\n\n1. 2D Array Indexing\nConsider the following 2D array: arr_2d = np.array([[5, 10, 15], [20, 25, 30], [35, 40, 45]]) - Access the element at row index 1 and column index 2. - Extract the first row. - Extract the last column.\n\narr_2d = np.array([[5, 10, 15], [20, 25, 30], [35, 40, 45]])\nprint('element in R1 and C2 =',arr_2d[1,2])\nfirst_row = arr_2d[:1,:]\nprint('First Row :\\n',first_row)\nlast_clm = arr_2d[:,2:]\nprint('Last Colum:\\n',last_clm)\n\nelement in R1 and C2 = 30\nFirst Row :\n [[ 5 10 15]]\nLast Colum:\n [[15]\n [30]\n [45]]\n\n\n\n\n2. Boolean Indexing\nGiven an array arr = np.array([2, 5, 8, 11, 14, 17, 20]), use boolean indexing to: - Extract all values greater than 10. - Replace all values greater than 15 with -1.\n\narr = np.array([2, 5, 8, 11, 14, 17, 20])\ngreater_10 = arr[arr &gt; 10]\nprint('Values greater than 10 =',greater_10)\narr[arr &gt; 15] = -1\nprint('After replacing =',arr)\n\nValues greater than 10 = [11 14 17 20]\nAfter replacing = [ 2  5  8 11 14 -1 -1]\n\n\n\n\n3. Fancy Indexing\nUsing the 2D array arr_2d = np.array([[5, 10, 15], [20, 25, 30], [35, 40, 45]]), write code to:\n\nSelect the elements at positions (0,2), (1,1), and (2,0).\nUse fancy indexing to create a submatrix with rows 0 and 2, and columns 1 and 2.\nHint:\nFor 1st part, use arrays of row and column indices\nFor 2nd part, you can create a submatrix using fancy indexing by using np.newaxis to match the dimensions\n\n\narr_2d = np.array([[5, 10, 15], [20, 25, 30], [35, 40, 45]])\nprint('Element at pos (0,2):',arr_2d[0,2])\nprint('Element at pos (1,1):',arr_2d[1,1])\nprint('Element at pos (2,0):',arr_2d[2,0])\nsub_matrix = arr_2d[::2,1:3]\nprint('Sub Matrix :\\n',sub_matrix)\n\nElement at pos (0,2): 15\nElement at pos (1,1): 25\nElement at pos (2,0): 35\nSub Matrix :\n [[10 15]\n [40 45]]\n\n\n\n\n4. Slicing 1D array\nGiven the array arr = np.array([1, 3, 5, 7, 9, 11, 13, 15]), write code to:\n\nExtract the first 4 elements.\nExtract every second element from the entire array.\nExtract elements from index 2 to the end, stepping by 2.\n\n\narr = np.array([1, 3, 5, 7, 9, 11, 13, 15])\nprint('First 4 elements :',arr[:4])\nprint('Every 2nd element :',arr[1::2])\nprint('elements from index 2 to the end, stepping by 2 :',arr[2::2])\n\nFirst 4 elements : [1 3 5 7]\nEvery 2nd element : [ 3  7 11 15]\nelements from index 2 to the end, stepping by 2 : [ 5  9 13]\n\n\n\n\n5. Slicing a 2D Array\nGiven the following 2D array: arr_2d = np.array([[10, 20, 30, 40], [50, 60, 70, 80], [90, 100, 110, 120]]) - Slice and print the last two columns of 1st row. - Slice and print the last row, reversed.\n\narr_2d = np.array([[10, 20, 30, 40], [50, 60, 70, 80], [90, 100, 110, 120]])\nx = arr_2d[:1,-2:]\nprint(' last two columns of 1st row :',x)\ny = arr_2d[-1::,::-1]\nprint('Last Row,Reversed :',y)\n\n last two columns of 1st row : [[30 40]]\nLast Row,Reversed : [[120 110 100  90]]\n\n\n\n\n6. Handling Out-of-Range Indices in Slicing vs. Indexing\nGiven the array: arr = np.array([10, 20, 30, 40, 50])\n\nWhat will be the output of the following slicing operations? Explain why they work, even though some indices are out of range.\nprint(arr[2:10])\n\nprint(arr[-10:3])\nCompare the behavior of slicing to accessing a single element with an out-of-range index (e.g., arr[10]). Why does slicing not raise an error in these cases, but indexing does?\n\n\narr = np.array([10, 20, 30, 40, 50])\nprint(arr[2:10])\n#If the given 'STOP' index is exceeding the index of the final element present in the array,then the system considers upto the last element.\nprint(arr[-10:3])\n#If the given 'START' index is less than the index of the first element present in the array,then the system considers from the first element.\n# Slicing is more flexible that indexing. This is the reason for slicing not  showing error.\n\n[30 40 50]\n[10 20 30]\n\n\n\n\n7. Work with an Audio File\nDownload the audio file from the following link: Simple Logo - Pixabay. Load the audio file using pydub and complete the following tasks:\n\nExtract the first second of the audio and plot its waveform.\n\nHint: Use the frame rate to calculate how many samples are in 1 second, and use slicing to extract this part.\n\nExtract the last second of the audio and plot its waveform.\nCombine the samples from the first second and the last second into a new array and plot the combined waveform.\nHint: Use NumPy’s np.concatenate() function to merge the two slices.\n\n\nfrom email.mime import audio\nfrom pydub import AudioSegment\nimport os\naudio_path = \"C:/Users/ROHIT REDDY MARRI/Downloads/simple logo.mp3\"\naudio = AudioSegment.from_file(audio_path)\n\n\n\n\nReshaping in NumPy\n####1. Create a 2D array of shape (3, 5). Flatten it into a 1D array and then reshape it back into a (5, 3) array.\n####2. Create a 1D array\narr = np.array([1, 2, 3, 4, 5])\n####Reshape arr into (5,1), then convert to (5,) and then convert it into (1,5).\n####3. Create a 1D NumPy array with values ranging from 1 to 100. Reshape it into a (10, 10) matrix. Apply ‘.ravel()’ and ‘.flatten()’ on the matrix and modify the original matrix. Compare the outputs of both methods and explain the difference in memory sharing.\n####4. Generate a 5x5 NumPy matrix representing pixel intensities from an image. Use slicing to extract the central 3x3 section of the matrix and flatten it. How does reshaping impact the spatial relationships of the pixels?\n####5. Create a 3-channel RGB image as a NumPy array of shape (3, 4, 4) with random integer values between 0 and 255. Flatten the image using ‘.reshape()’ and reshape it back to its original shape. Explain the order of pixel data stored and how reshaping affects the channel structure.\n\n# @title 1\narr_2D = np.random.randint(1,10,(3,5))\nprint(\"original array:\\n\",arr_2D)\nflatten_arr_2D = arr_2D.flatten()\nprint(\"flattened aray :\\n\",flatten_arr_2D)\nreshape_arr = flatten_arr_2D.reshape((5,3))\nprint(\"reshaped array :\\n\",reshape_arr)\n\noriginal array:\n [[5 4 7 6 4]\n [6 9 9 1 5]\n [4 4 1 3 3]]\nflattened aray :\n [5 4 7 6 4 6 9 9 1 5 4 4 1 3 3]\nreshaped array :\n [[5 4 7]\n [6 4 6]\n [9 9 1]\n [5 4 4]\n [1 3 3]]\n\n\n\n# @title 2\narr = np.array([1, 2, 3, 4, 5])\nprint(\"reshaped array :\\n\",arr.reshape(5,1))\nprint(\"flattened array :\\n\",arr.reshape(5,1).flatten())\nprint(\"final array:\\n\",arr.reshape(1,5))\n\nreshaped array :\n [[1]\n [2]\n [3]\n [4]\n [5]]\nflattened array :\n [1 2 3 4 5]\nfinal array:\n [[1 2 3 4 5]]\n\n\n\n# @title 3\nreshaped_1D_arr = np.arange(1,101).reshape((10,10))\nprint(reshaped_1D_arr)\nravel_arr = reshaped_1D_arr.ravel()\nflatten_arr = reshaped_1D_arr.flatten()\nreshaped_1D_arr[3:] = 0\nprint('Ravelled array :\\n',ravel_arr)\nprint('Flattened array :\\n',flatten_arr)\n# Ravel fuction is just the view of an array,they both share the same memory. So, the changes made to any one of them will also change the other.\n#Flatten function completely makes an another flattened copy of the original array and they both have different individual memory. Since it is a copy, making changes in one does not affect the other.\n\n[[  1   2   3   4   5   6   7   8   9  10]\n [ 11  12  13  14  15  16  17  18  19  20]\n [ 21  22  23  24  25  26  27  28  29  30]\n [ 31  32  33  34  35  36  37  38  39  40]\n [ 41  42  43  44  45  46  47  48  49  50]\n [ 51  52  53  54  55  56  57  58  59  60]\n [ 61  62  63  64  65  66  67  68  69  70]\n [ 71  72  73  74  75  76  77  78  79  80]\n [ 81  82  83  84  85  86  87  88  89  90]\n [ 91  92  93  94  95  96  97  98  99 100]]\nRavelled array :\n [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n 25 26 27 28 29 30  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  0  0  0  0]\nFlattened array :\n [  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n  91  92  93  94  95  96  97  98  99 100]\n\n\n\n# @title 4\nmatrix = np.random.randint(0,256,(5,5))\nprint(matrix)\nsub_matrix = matrix[1:4,1:4]\nprint(sub_matrix)\nflattened_sub_matrix = sub_matrix.flatten()\nprint(flattened_sub_matrix)\n# While reshaping ,it converts 2D array into a 1D array and this will disrupt the spatial arrangement of the pixels. Hence this will affect programs that depend on spatial configurations.\n\n[[122 103  57  17 125]\n [119 251 149 164 109]\n [207  58 139 123 183]\n [ 85   2  62 170  85]\n [161  69 135 174 123]]\n[[251 149 164]\n [ 58 139 123]\n [  2  62 170]]\n[251 149 164  58 139 123   2  62 170]\n\n\n\n# @title 5\nimage = np.random.randint(0,256,(3,4,4))\nprint(image)\nplt.imshow(image)\nplt.show()\nflatten_image = image.reshape(-1)\nprint(flatten_image)\nfinal_image = flatten_image.reshape((3,4,4))\nprint(final_image)\nplt.imshow(final_image)\nplt.show()\n# The pixel data of channels is stored in the continuous 1D array where each channel has its own 1D array. When we flaten the image all the channels align in a single 1D array one by one. If it reshaped again then they return to their original positions.\n#Reshaping doesn't affect the channel structure, but just changees the veiw point of the structure.\n\n[[[127 179 160 170]\n  [184 221 225 169]\n  [142  20 226 248]\n  [142  69 129  76]]\n\n [[206  37 201  75]\n  [134 243 105 250]\n  [ 55 225 187  87]\n  [168 188 170 115]]\n\n [[146 242 139  71]\n  [156 107  46  18]\n  [ 76 163 200  83]\n  [ 70 157 166 220]]]\n\n\n\n\n\n\n\n\n\n[127 179 160 170 184 221 225 169 142  20 226 248 142  69 129  76 206  37\n 201  75 134 243 105 250  55 225 187  87 168 188 170 115 146 242 139  71\n 156 107  46  18  76 163 200  83  70 157 166 220]\n[[[127 179 160 170]\n  [184 221 225 169]\n  [142  20 226 248]\n  [142  69 129  76]]\n\n [[206  37 201  75]\n  [134 243 105 250]\n  [ 55 225 187  87]\n  [168 188 170 115]]\n\n [[146 242 139  71]\n  [156 107  46  18]\n  [ 76 163 200  83]\n  [ 70 157 166 220]]]\n\n\n\n\n\n\n\n\n\n\n\nUniversal Functions\nQ1) Given an array x = [1, 4, 9, 16, 25], compute the square root of each element in the array and print the result.\nQ2) Create an array angles =[0, \\(\\frac{\\pi}{2}\\), \\(\\pi\\), \\(\\frac{3\\pi}{2}\\)] , calculate the sine of each angle and print the result.\nQ3) Given two arrays a =[True, False, True] and b = [False, False, True], perform an element-wise logical AND operation and print the result.\nQ4) Create two arrays x = [1, 2, 3, 4] and y = [2, 2, 3, 5], perform an element-wise comparison (x &lt; y) and print the result.\nQ5) Create an array x =[-2, -1, 0, 1, 2, 3, 4], compute the following element-wise operation:\n\nIf an element is negative, square it.\nIf an element is non-negative, compute its exponential. Print the resulting array.\n\n\n# @title 1\nx = np.array([1,4,9,16,25])\nsqrt_x = np.sqrt(x)\nprint(\"after applying square root =\",sqrt_x)\n\nafter applying square root = [1. 2. 3. 4. 5.]\n\n\n\n# @title 2\nangles = np.array([0, np.pi/2, np.pi, 3*np.pi/2])\nsin_values = np.sin(angles).astype(int)\nprint(sin_values)\n\n[ 0  1  0 -1]\n\n\n\n# @title 3\na = np.array([True, False, True])\nb = np.array([False, False, True])\nprint('after performing element wise and operation:',a & b)\n\nafter performing element wise and operation: [False False  True]\n\n\n\n# @title 4\nx = np.array([1, 2, 3, 4])\ny = np.array([2, 2, 3, 5])\nprint(\"element wise comparision :\",x &lt; y)\n\nelement wise comparision : [ True False False  True]\n\n\n\n# @title 5\nx = np.array([-2, -1, 0, 1, 2, 3, 4])\nmask1 = x &lt; 0\nmask2 = x &gt;= 0\nresult = np.where(mask1, x**2, np.exp(x))\nprint(result)\n\n[ 4.          1.          1.          2.71828183  7.3890561  20.08553692\n 54.59815003]\n\n\n\n\nAggregations\n####1. Generate a random array of size 10. calculate the following: - Print the array - The sum of all elements. - The mean of the array. - The standard deviation. - Find 5\\(*\\)Minimum -3\\(*\\)Maximum\n####2. Generate a 4x5 matrix with random integers between 1 and 50. - Print the matrix. - Compute the mean of all elements in the matrix. - Compute the sum of each row in the matrix.\n####3. Generate a random 3x3 matrix with random integers between 1 to 10 - Find the minimum value in each column and store it in a separate list min. - Find the maximum value in each row and store it in a separate list max. - Find the value of minimum of list max - maximum of list min.\n####4. Given the array : data = np.array([15, 25, 35, 45, 55, 65]): - Find the minimum value. - Subtract this minimum value from all elements of the array and then calculate the mean of the resulting array.\n####5. Given the array : arr = np.array([3, 5, 7, 9, 11]): - Compute the cumulative sum of the elements. - Compute the cumulative product of the elements.\n####6. Imagine you have a dataset representing the scores of 4 students in 3 subjects: scores = np.array([[85, 92, 78], [88, 76, 95], [91, 89, 82], [75, 85, 88]]) - Compute the average score for each student. - Compute the highest score in each subject. - Determine the overall average score for all students across all subjects.\n\n# @title 1\narr = np.random.randint(1,200,size = 10)\nprint('array :',arr)\nprint('sum =',np.sum(arr))\nprint('mean =',np.mean(arr))\nprint('standard deviation =',np.std(arr))\nprint('5 ∗ Minimum -3 ∗ Maximum =',5*np.min(arr)-3*max(arr))\n\narray : [ 57  54 124 113   2  69  93  74 133  82]\nsum = 801\nmean = 80.1\nstandard deviation = 36.6781951573411\n5 ∗ Minimum -3 ∗ Maximum = -389\n\n\n\n# @title 2\nmatrix = np.random.randint(2,50,(4,5))\nprint('matrix :',matrix)\nprint('mean =',np.mean(matrix))\nsum = np.sum(matrix,axis = 1)\nprint('sum of each row =',sum)\n\nmatrix : [[15 10 25 21 27]\n [ 8 43 43 22 14]\n [48 17  5 33 47]\n [38 11 24 43  4]]\nmean = 24.9\nsum of each row = [ 98 130 150 120]\n\n\n\n# @title 3\nmtrix = np.random.randint(1,11,(3,3))\nprint('matrix :\\n',matrix)\nmin = list(np.min(matrix, axis = 0))\nmax = list(np.max(matrix, axis = 1))\nmin.sort(reverse = True)\nmax.sort()\nprint('list min:',min)\nprint('list max:',max)\nprint('value of minimum of list max - maximum of list min :',max[0]-min[0])\n\nmatrix :\n [[15 10 25 21 27]\n [ 8 43 43 22 14]\n [48 17  5 33 47]\n [38 11 24 43  4]]\nlist min: [21, 10, 8, 5, 4]\nlist max: [27, 43, 43, 48]\nvalue of minimum of list max - maximum of list min : 6\n\n\n\n# @title 4\ndata = np.array([15, 25, 35, 45, 55, 65])\nmin_value = np.min(data)\nprint(\"Min Value =\",min_value)\nmean = (data - min_value).mean()\nprint('Mean = ',mean)\n\nMin Value = 15\nMean =  25.0\n\n\n\n# @title 5\narr = np.array([3, 5, 7, 9, 11])\ncum_sum = np.cumsum(arr)\ncum_product = np.cumprod(arr)\nprint('cumulative sum=',cum_sum)\nprint('cumulative product =',cum_product)\n\ncumulative sum= [ 3  8 15 24 35]\ncumulative product = [    3    15   105   945 10395]\n\n\n\n# @title 6\nscores = np.array([[85, 92, 78], [88, 76, 95], [91, 89, 82], [75, 85, 88]])\navg_per_student = np.mean(scores, axis=1)\nprint(\"Average score for each student:\", avg_per_student)\nhighest_per_subject = np.max(scores, axis=0)\nprint(\"Highest score in each subject:\", highest_per_subject)\noverall_avg = np.mean(scores)\nprint(\"Overall average score:\", overall_avg)\n\nAverage score for each student: [85.         86.33333333 87.33333333 82.66666667]\nHighest score in each subject: [91 92 95]\nOverall average score: 85.33333333333333\n\n\n\n\nBroadcasting in NumPy\n####1. Given two arrays:\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) (shape: (3, 3)) B = np.array([10, 20, 30]) (shape: (3,)) Perform elementwise addition of A and B using broadcasting and print the result.\nWhat is the resulting shape?\n####2. Write a function check_broadcasting(shape1, shape2) that:\nAccepts two shapes as input and checks if they are broadcast-compatible. Use the function to test the following shape pairs: (3, 4) and (4,) (2, 1, 5) and (3, 5) (2, 3) and (2,)\nFor each case:\n\nState whether broadcasting is possible.\nIf possible, state the resulting shape of the operation\n\n####3. Create a 2D array A of shape (3, 5) with random integers between 1 and 10. Create a 1D array B of shape (5,) with random integers between 1 and 5. Use broadcasting to subtract B from each row of A and print the result.\n####4. Create a 3D array A with shape (2, 4, 3) filled with random integers between 0 and 10.\n\nCreate an array B of shape (4, 3) containing a constant value of 5.\nUse broadcasting to add B to each 2D array slice of A.\nPrint the result\n\n####5. : You are given a grayscale image of shape (32, 32), where each pixel value is an integer. You want to apply a scaling factor of 0.5 to all the pixel values using broadcasting.\n\nUse broadcasting to scale the image by multiplying it with the scaling factor 0.5.\nVerify that the pixel values of the image are halved by printing the scaled image.\n\n####6. Calculate the distance between an observation point and a set of code points (codes). The goal is to find the closest code to the observation by calculating the Euclidean distance between each code and the observation.\n\nGiven two arrays :\n\ncodes = np.array([ [1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [1.0, 1.0, 1.0], [2.0, 3.0, 4.0]])\nobservation = np.array([3.0, 3.0, 3.0])\n\nUse broadcasting to calculate the squared Euclidean distance between the observation and each code.\nFind and print the index of the closest code to the observation.\nPrint the distance between the observation and the closest code.\n\nHINT : use np.argmin() to find the index of the closest code\n\n# @title 1\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nB = np.array([10, 20, 30])\nadded_result = A + B\nprint(added_result)\nprint(added_result.shape)\n\n[[11 22 33]\n [14 25 36]\n [17 28 39]]\n(3, 3)\n\n\n\n# @title 2\ndef check_broadcasting(shape1, shape2):\n    try:\n        result = np.broadcast(np.empty(shape1), np.empty(shape2))\n        return 'can be Broadcasted', \"shape =\",result.shape\n    except ValueError:\n        return \"can't be Broadcasted\", None\nprint('(3,4) and (4,) ',check_broadcasting((3,4),(4,)))\nprint('(2,1,5) and (3,5) ',check_broadcasting((2,1,5),(3,5)))\nprint('(2,3) and (2,) ',check_broadcasting((2,3),(2,)))\n\n(3,4) and (4,)  ('can be Broadcasted', 'shape =', (3, 4))\n(2,1,5) and (3,5)  ('can be Broadcasted', 'shape =', (2, 3, 5))\n(2,3) and (2,)  (\"can't be Broadcasted\", None)\n\n\n\n# @title 3\nA = np.random.randint(2,10,(3,5))\nprint(A)\nB = np.random.randint(1,5,(5,))\nprint(B)\n#subtracting B from each row of A is same as subtracting B from A.\nprint('A - B =',A-B)\n\n[[4 2 6 5 6]\n [7 3 5 9 8]\n [7 5 8 5 2]]\n[1 3 3 1 1]\nA - B = [[ 3 -1  3  4  5]\n [ 6  0  2  8  7]\n [ 6  2  5  4  1]]\n\n\n\n# @title 4\nA = np.random.randint(1,10,(2,4,3))\nprint('A :\\n',A)\nB = np.full((4,3),5)\nprint('B :\\n',B)\nprint(\"Result of A + B (after broadcasting):\\n\",A+B)\n\nA :\n [[[7 9 4]\n  [9 8 1]\n  [9 6 4]\n  [9 6 2]]\n\n [[7 8 9]\n  [9 7 8]\n  [1 1 5]\n  [2 4 4]]]\nB :\n [[5 5 5]\n [5 5 5]\n [5 5 5]\n [5 5 5]]\nResult of A + B (after broadcasting):\n [[[12 14  9]\n  [14 13  6]\n  [14 11  9]\n  [14 11  7]]\n\n [[12 13 14]\n  [14 12 13]\n  [ 6  6 10]\n  [ 7  9  9]]]\n\n\n\n# @title 5\nimage = np.random.randint(0,256,(32,32))\nprint('Original Image :\\n',image)\nscale_factor = 0.5\nscaled_image = image*scale_factor\nprint('Scaled Image :\\n',scaled_image)\n\nOriginal Image :\n [[244  44 118 ... 216 220  20]\n [ 77 190 186 ... 250   0 255]\n [ 22 243 158 ... 254 248  81]\n ...\n [ 54 123 136 ... 221 173 231]\n [136 163   7 ... 229 161 166]\n [140  76  73 ... 144  58 155]]\nScaled Image :\n [[122.   22.   59.  ... 108.  110.   10. ]\n [ 38.5  95.   93.  ... 125.    0.  127.5]\n [ 11.  121.5  79.  ... 127.  124.   40.5]\n ...\n [ 27.   61.5  68.  ... 110.5  86.5 115.5]\n [ 68.   81.5   3.5 ... 114.5  80.5  83. ]\n [ 70.   38.   36.5 ...  72.   29.   77.5]]\n\n\n\n# @title 6\ncodes = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [1.0, 1.0, 1.0], [2.0, 3.0, 4.0]])\nobservation = np.array([3.0, 3.0, 3.0])\ndiff = codes - observation\nsquared_distances = np.sum(diff**2, axis=1)\nclosest_index = np.argmin(squared_distances)\nclosest_distance = squared_distances[closest_index]**0.5\nprint(f\"The index of the closest code: {closest_index}\")\nprint(f\"The Euclidean distance to the closest code: {closest_distance}\")\n\nThe index of the closest code: 4\nThe Euclidean distance to the closest code: 1.4142135623730951\n\n\n\n\nConcatenation\n\nWrite a program to vertically stack arrays using np.vstack and print the result: (Use any three 1D arrays)  \nWrite a program to horizontally stack arrays using np.hstack. Print the result: (Use any three 1D arrays)  \nGiven two 2D arrays of the same row size, horizontally stack them using np.hstack and print the result: m = np.array([[2, 4], [3, 6]]) n = np.array([[4, 8], [5, 10]]) \nUsing np.vstack, stack the following arrays vertically and print the results: a = np.array([11, 12, 13]) b = np.array([[14, 15, 16], [17, 18, 19]]) \nConcatenate the following 2D arrays along different axes using np.concatenate. Demonstrate how to concatenate them along axis 0 and axis 1. x = np.array([[1, 2], [3, 4]]) y = np.array([[5, 6], [7, 8]]) z = np.array([[9, 10], [11, 12]])\n\n\n# @title 1\narr1 = np.array([1,2,3,4])\narr2 = np.array([5,6,7,8])\narr3 = np.array([9,0,1,2])\nprint('VStack :\\n', np.vstack([arr1,arr2,arr3]))\n\nVStack :\n [[1 2 3 4]\n [5 6 7 8]\n [9 0 1 2]]\n\n\n\n# @title 2\narr1 = np.array([1,2,3,4])\narr2 = np.array([5,6,7,8])\narr3 = np.array([9,0,1,2])\nprint('HStack :\\n', np.hstack([arr1,arr2,arr3]))\n\nHStack :\n [1 2 3 4 5 6 7 8 9 0 1 2]\n\n\n\n# @title 3\nm = np.array([[2, 4], [3, 6]])\nn = np.array([[4, 8], [5, 10]])\nprint('HStack :\\n',np.hstack([m,n]))\n\nHStack :\n [[ 2  4  4  8]\n [ 3  6  5 10]]\n\n\n\n# @title 4\na = np.array([11, 12, 13])\nb = np.array([[14, 15, 16], [17, 18, 19]])\nprint('VStack :\\n',np.vstack([a,b]))\n\nVStack :\n [[11 12 13]\n [14 15 16]\n [17 18 19]]\n\n\n\n# @title 5\nx = np.array([[1, 2], [3, 4]])\ny = np.array([[5, 6], [7, 8]])\nz = np.array([[9, 10], [11, 12]])\nprint('Vertical_concatenated_form :\\n',np.concatenate([x,y,z],axis = 0))\nprint('Horizontal_concatenated_form :\\n',np.concatenate([x,y,z],axis = 1))\n\nVertical_concatenated_form :\n [[ 1  2]\n [ 3  4]\n [ 5  6]\n [ 7  8]\n [ 9 10]\n [11 12]]\nHorizontal_concatenated_form :\n [[ 1  2  5  6  9 10]\n [ 3  4  7  8 11 12]]\n\n\n\n\nBoolean Masking\n\nUse Boolean masking to filter elements from a 1D array: Write a program to create a 1D array and use Boolean masking to filter out all elements greater than 5.\nApply a Boolean mask to a 2D array: Given the 2D array below, create a Boolean mask to select all elements greater than 10 and print the masked elements. arr = np.array([[5, 12, 18], [7, 1, 3], [11, 6, 14]]) \nCreate a Boolean mask using a condition on an array: Create a 1D array of integers from 0 to 10. Use a Boolean mask to filter out all even numbers and print the result. Example: arr = np.arange(11) \nCombine Boolean masks using logical operations: Given the array below, create and combine two Boolean masks: One mask selects elements greater than 5. The other mask selects elements divisible by 3. Combine the masks using logical AND and print the result. Example: arr = np.array([1, 3, 6, 9, 12, 15]) \nMask elements in a 2D array and replace them: Write a program to replace all elements less than 5 in the 2D array below with 0 using Boolean masking. \nCount elements satisfying a condition using Boolean masks: Write a program to count how many elements in the array below are greater than 5. \n\n\n# @title 1\narr_1D = np.random.randint(1,10,(10,))\nprint(arr_1D)\nmask = arr_1D &gt; 5\nfiltered_arr_1D = arr_1D[mask]\nprint(filtered_arr_1D)\n\n[1 8 3 3 4 5 4 7 4 1]\n[8 7]\n\n\n\n# @title 2\narr = np.array([[5, 12, 18], [7, 1, 3], [11, 6, 14]])\nmask = arr &gt; 10\nmasked_elements = arr[mask]\nprint(masked_elements)\n\n[12 18 11 14]\n\n\n\n# @title 3\narr = np.arange(11)\nmask = arr % 2 == 0\neven_numbers = arr[mask]\nprint(even_numbers)\n\n[ 0  2  4  6  8 10]\n\n\n\n# @title 4\narr = np.array([1, 3, 6, 9, 12, 15])\nmask1 = arr &gt; 5\nmask2 = arr % 3 == 0\ncombined_mask = mask1 & mask2\nfiltered_elements = arr[combined_mask]\nprint(filtered_elements)\n\n[ 6  9 12 15]\n\n\n\n# @title 5\narr_2D = np.random.randint(0,10,(3,3))\nmask = arr_2D &lt; 5\narr_2D[mask] = 0\nprint(arr_2D)\n\n[[0 9 7]\n [5 7 6]\n [6 9 0]]\n\n\n\n# @title 6\narr = np.array([10, 3, 6, 9, 12, 15])\nmask = arr &gt; 5\ncount = np.sum(mask)\nprint(count)\n\n5"
  }
]